import discord
from discord.ext import commands, tasks
from discord import app_commands
import asyncio
from datetime import datetime, timedelta

intents = discord.Intents.default()
bot = commands.Bot(command_prefix="!", intents=intents)

# Temporary storage
active_polls = {}

class PollOption:
    def __init__(self, image_url, title, mentioned_user):
        self.image_url = image_url
        self.title = title
        self.mentioned_user = mentioned_user
        self.votes = 0

class Poll:
    def __init__(self, host_id, options, end_time, announce_channel):
        self.host_id = host_id
        self.options = options
        self.end_time = end_time
        self.announce_channel = announce_channel
        self.message = None
        self.voter_data = {}

@bot.event
async def on_ready():
    print(f'Logged in as {bot.user}')
    poll_check_loop.start()

@bot.tree.command(name="createpoll", description="Create a detailed poll with images and options.")
@app_commands.describe(duration="e.g. 10m, 3h, 2d, 1w", announce_channel="Channel to post the result in")
async def createpoll(interaction: discord.Interaction, duration: str, announce_channel: discord.TextChannel):
    await interaction.response.send_message("Please upload your poll options (images) with titles.\nUse `/addoption` multiple times.", ephemeral=True)
    
    poll_id = f"{interaction.user.id}-{datetime.utcnow().timestamp()}"
    active_polls[poll_id] = Poll(interaction.user.id, [], None, announce_channel)
    
    # Parse duration string
    units = {'m': 'minutes', 'h': 'hours', 'd': 'days', 'w': 'weeks'}
    unit = duration[-1]
    value = int(duration[:-1])
    delta_args = {units[unit]: value}
    end_time = datetime.utcnow() + timedelta(**delta_args)
    active_polls[poll_id].end_time = end_time
    
    await interaction.followup.send(f"Poll ID: `{poll_id}` saved. Now add options using `/addoption {poll_id}`", ephemeral=True)

@bot.tree.command(name="addoption")
@app_commands.describe(poll_id="ID from /createpoll", title="Option title", user="User to mention with this option")
async def addoption(interaction: discord.Interaction, poll_id: str, title: str, user: discord.User = None):
    if poll_id not in active_polls:
        await interaction.response.send_message("Invalid poll ID!", ephemeral=True)
        return

    if not interaction.attachments:
        await interaction.response.send_message("Please upload an image with the command.", ephemeral=True)
        return

    image_url = interaction.attachments[0].url
    poll = active_polls[poll_id]
    poll.options.append(PollOption(image_url, title, user))
    await interaction.response.send_message(f"Added option: {title} for poll `{poll_id}`", ephemeral=True)

@bot.tree.command(name="startpoll")
@app_commands.describe(poll_id="ID from /createpoll")
async def startpoll(interaction: discord.Interaction, poll_id: str):
    if poll_id not in active_polls:
        await interaction.response.send_message("Poll not found.", ephemeral=True)
        return

    poll = active_polls[poll_id]
    embed = discord.Embed(title="üìä New Poll", description=f"React to vote! Ends <t:{int(poll.end_time.timestamp())}:R>")
    
    message_components = []
    for i, option in enumerate(poll.options):
        embed.add_field(
            name=f"{i+1}. {option.title}",
            value=f"{option.mentioned_user.mention if option.mentioned_user else 'No user'}",
            inline=False
        )
        embed.set_image(url=option.image_url)

    message = await interaction.channel.send(embed=embed)
    poll.message = message

    for i in range(len(poll.options)):
        await message.add_reaction(chr(0x31 + i) + '\u20E3')  # 1Ô∏è‚É£ 2Ô∏è‚É£ ...

    await interaction.response.send_message("Poll started!", ephemeral=True)

@tasks.loop(minutes=1)
async def poll_check_loop():
    now = datetime.utcnow()
    for poll_id in list(active_polls):
        poll = active_polls[poll_id]
        if now >= poll.end_time:
            message = poll.message
            if not message:
                continue

            # Tally votes
            msg = await message.channel.fetch_message(message.id)
            reactions = msg.reactions
            for i, r in enumerate(reactions):
                poll.options[i].votes = r.count - 1  # subtract bot's own reaction

            # Find winner
            winner = max(poll.options, key=lambda o: o.votes)
            winner_mention = winner.mentioned_user.mention if winner.mentioned_user else winner.title
            host = await bot.fetch_user(poll.host_id)
            result_channel = poll.announce_channel

            await result_channel.send(
                f"üèÜ **Poll Result** üèÜ\nWinner: **{winner.title}** ({winner.votes} votes)\n"
                f"Submitted by: {winner_mention}\nHost: {host.mention}"
            )

            del active_polls[poll_id]

bot.run("YOUR_BOT_TOKEN")
